import os
import logging
import requests
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from dotenv import load_dotenv

load_dotenv()

TOKEN = os.getenv('7771401070:AAEowlF-ZGIOeAsLxA0bFlwpLnIQwCeABrM')
HUGGINGFACE_API = os.getenv('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')

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

async def generate_image_huggingface(prompt):
    API_URL = "https://api-inference.huggingface.co/models/stabilityai/stable-diffusion-xl-base-1.0"
    headers = {"Authorization": f"Bearer {HUGGINGFACE_API}"}
    
    response = requests.post(API_URL, headers=headers, json={"inputs": prompt})
    
    if response.status_code != 200:
        raise Exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    
    return response.content

async def generate_text(prompt):
    API_URL = "https://api-inference.huggingface.co/models/mistralai/Mixtral-8x7B-Instruct-v0.1"
    headers = {"Authorization": f"Bearer {HUGGINGFACE_API}"}
    
    response = requests.post(API_URL, headers=headers, json={
        "inputs": f"–ù–∞–ø–∏—à–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ—Å—Ç –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª–∞ –æ –Ω–æ–≥—Ç–µ–≤–æ–º —Å–µ—Ä–≤–∏—Å–µ –Ω–∞ —Ç–µ–º—É: {prompt}. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏. –î–æ–±–∞–≤—å —Ö—ç—à—Ç–µ–≥–∏ –≤ –∫–æ–Ω—Ü–µ."
    })
    
    if response.status_code != 200:
        raise Exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞")
        
    return response.json()[0]['generated_text']

def generate_design_prompt(theme):
    return f"professional nail art design, {theme}, elegant manicure, high-end nail salon, professional photography, soft lighting, detailed nail art, luxury beauty, instagram worthy, professional quality, 8k, hyperrealistic"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_text = """
    –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –≤–∞—à–µ–≥–æ nail-–±–ª–æ–≥–∞ üíÖ
    
    –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
    /salon [—Ç–µ–º–∞] - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±–∑–æ—Ä —Å–∞–ª–æ–Ω–∞
    /design [—Ç–µ–º–∞] - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±–∑–æ—Ä –¥–∏–∑–∞–π–Ω–∞
    /trend [—Ç–µ–º–∞] - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç –æ —Ç—Ä–µ–Ω–¥–µ
    
    –ù–∞–ø—Ä–∏–º–µ—Ä:
    /salon —É—é—Ç–Ω–∞—è —Å—Ç—É–¥–∏—è –≤ —Ü–µ–Ω—Ç—Ä–µ –≥–æ—Ä–æ–¥–∞
    /design —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π –º–∞–Ω–∏–∫—é—Ä —Å —Ü–≤–µ—Ç–∞–º–∏
    /trend –º–æ–¥–Ω—ã–µ —Ü–≤–µ—Ç–∞ –≤–µ—Å–Ω—ã 2025
    """
    await update.message.reply_text(welcome_text)

async def salon_review(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        theme = ' '.join(context.args) if context.args else "—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã"
        await update.message.reply_text("–°–æ–∑–¥–∞—é –æ–±–∑–æ—Ä —Å–∞–ª–æ–Ω–∞...")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ–±–∑–æ—Ä–∞
        prompt = f"–ù–∞–ø–∏—à–∏ –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ–±–∑–æ—Ä —Å–∞–ª–æ–Ω–∞ –∫—Ä–∞—Å–æ—Ç—ã –Ω–∞ —Ç–µ–º—É: {theme}. –í–∫–ª—é—á–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞, —É—Å–ª—É–≥, —Ü–µ–Ω, –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏."
        review_text = await generate_text(prompt)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–∞–ª–æ–Ω–∞
        image_prompt = f"luxury nail salon interior, {theme}, modern design, beauty salon, professional lighting, elegant interior, high-end equipment, 8k, hyperrealistic"
        image = await generate_image_huggingface(image_prompt)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        await update.message.reply_photo(image)
        await update.message.reply_text(review_text)
        
    except Exception as e:
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

async def design_review(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        theme = ' '.join(context.args) if context.args else "–º–æ–¥–Ω—ã–π –º–∞–Ω–∏–∫—é—Ä"
        await update.message.reply_text("–°–æ–∑–¥–∞—é –æ–±–∑–æ—Ä –¥–∏–∑–∞–π–Ω–∞...")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ –¥–∏–∑–∞–π–Ω–µ
        prompt = f"–ù–∞–ø–∏—à–∏ –ø–æ–¥—Ä–æ–±–Ω—ã–π –ø–æ—Å—Ç –æ –¥–∏–∑–∞–π–Ω–µ –Ω–æ–≥—Ç–µ–π: {theme}. –û–ø–∏—à–∏ —Ç–µ—Ö–Ω–∏–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –¥–∏–∑–∞–π–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏."
        design_text = await generate_text(prompt)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∏–∑–∞–π–Ω–∞
        image = await generate_image_huggingface(generate_design_prompt(theme))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        await update.message.reply_photo(image)
        await update.message.reply_text(design_text)
        
    except Exception as e:
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

async def trend_post(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        theme = ' '.join(context.args) if context.args else "—Ç—Ä–µ–Ω–¥—ã –º–∞–Ω–∏–∫—é—Ä–∞"
        await update.message.reply_text("–°–æ–∑–¥–∞—é –ø–æ—Å—Ç –æ —Ç—Ä–µ–Ω–¥–µ...")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ —Ç—Ä–µ–Ω–¥–µ
        prompt = f"–ù–∞–ø–∏—à–∏ –ø–æ—Å—Ç –æ —Ç—Ä–µ–Ω–¥–∞—Ö –≤ –º–∞–Ω–∏–∫—é—Ä–µ –Ω–∞ —Ç–µ–º—É: {theme}. –í–∫–ª—é—á–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–π, —Å–æ–≤–µ—Ç—ã –ø–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—é, —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏."
        trend_text = await generate_text(prompt)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–ª–ª–∞–∂ –∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö –¥–∏–∑–∞–π–Ω–æ–≤
        image = await generate_image_huggingface(generate_design_prompt(theme))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        await update.message.reply_photo(image)
        await update.message.reply_text(trend_text)
        
    except Exception as e:
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

def main():
    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("salon", salon_review))
    application.add_handler(CommandHandler("design", design_review))
    application.add_handler(CommandHandler("trend", trend_post))

    application.run_polling()

if __name__ == '__main__':
    main()
